{
  "service": {
    "service": "Oauth",
    "serviceObject": {
      "name": "Oauth"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "provided",
      "region": "eu-west-2",
      "stackName": "Wecari-Oauth-dev",
      "apiName": "Wecari-Oauth-dev",
      "environment": {
        "ENV": "dev",
        "BREF_BINARY_RESPONSES": 1,
        "DB_NAME": "13243546576879_oauth",
        "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
        "DB_USER": "wecari_db_public",
        "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
        "STAGE_DB_NAME": "13243546576879_oauth",
        "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
        "STAGE_DB_USER": "wecari_db_public",
        "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
        "BASE_PATH_MAP": "oauth"
      },
      "apiGateway": {
        "binaryMediaTypes": [
          "*/*"
        ]
      },
      "vpc": {
        "securityGroupIds": [
          "sg-095c9d58ddb37cca5"
        ],
        "subnetIds": [
          "subnet-6c499c20",
          "subnet-a9880ed3",
          "subnet-e453298d"
        ]
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "AuthorizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Oauth-dev-Authorize"
            }
          },
          "ResourcesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Oauth-dev-Resources"
            }
          },
          "TokenLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Oauth-dev-Token"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "Oauth",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Oauth-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Oauth-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "Oauth",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "AuthorizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Oauth/dev/1578331593241-2020-01-06T17:26:33.241Z/Oauth.zip"
              },
              "FunctionName": "Oauth-dev-Authorize",
              "Handler": "index.php",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "provided",
              "Timeout": 28,
              "Description": "Allow user to authorize access to their account",
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "BREF_BINARY_RESPONSES": 1,
                  "DB_NAME": "13243546576879_oauth",
                  "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
                  "DB_USER": "wecari_db_public",
                  "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
                  "STAGE_DB_NAME": "13243546576879_oauth",
                  "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
                  "STAGE_DB_USER": "wecari_db_public",
                  "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
                  "BASE_PATH_MAP": "oauth"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-095c9d58ddb37cca5"
                ],
                "SubnetIds": [
                  "subnet-6c499c20",
                  "subnet-a9880ed3",
                  "subnet-e453298d"
                ]
              },
              "Layers": [
                "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:14"
              ]
            },
            "DependsOn": [
              "AuthorizeLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "AuthorizeLambdaVersionruF8cdm6uOqasbftoMKYKetnkTl0yvSAYp7B84S6Kg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizeLambdaFunction"
              },
              "CodeSha256": "qDvmh8c9dOwopaC7ObFFdg7gSDpstzIB6IwhmEnphT4=",
              "Description": "Allow user to authorize access to their account"
            }
          },
          "ResourcesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Oauth/dev/1578331593241-2020-01-06T17:26:33.241Z/Oauth.zip"
              },
              "FunctionName": "Oauth-dev-Resources",
              "Handler": "index.php",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "provided",
              "Timeout": 28,
              "Description": "Retrieve oauth resources e.g user details with client credentials and access token",
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "BREF_BINARY_RESPONSES": 1,
                  "DB_NAME": "13243546576879_oauth",
                  "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
                  "DB_USER": "wecari_db_public",
                  "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
                  "STAGE_DB_NAME": "13243546576879_oauth",
                  "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
                  "STAGE_DB_USER": "wecari_db_public",
                  "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
                  "BASE_PATH_MAP": "oauth"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-095c9d58ddb37cca5"
                ],
                "SubnetIds": [
                  "subnet-6c499c20",
                  "subnet-a9880ed3",
                  "subnet-e453298d"
                ]
              },
              "Layers": [
                "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:14"
              ]
            },
            "DependsOn": [
              "ResourcesLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ResourcesLambdaVersion6g9asmMRWUW1ODPPzD4RMPF9j7CSQmjj2R9oNcSoY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResourcesLambdaFunction"
              },
              "CodeSha256": "qDvmh8c9dOwopaC7ObFFdg7gSDpstzIB6IwhmEnphT4=",
              "Description": "Retrieve oauth resources e.g user details with client credentials and access token"
            }
          },
          "TokenLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/Oauth/dev/1578331593241-2020-01-06T17:26:33.241Z/Oauth.zip"
              },
              "FunctionName": "Oauth-dev-Token",
              "Handler": "index.php",
              "MemorySize": 256,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "provided",
              "Timeout": 28,
              "Description": "Generate and verify oauth access tokens",
              "Environment": {
                "Variables": {
                  "ENV": "dev",
                  "BREF_BINARY_RESPONSES": 1,
                  "DB_NAME": "13243546576879_oauth",
                  "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
                  "DB_USER": "wecari_db_public",
                  "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
                  "STAGE_DB_NAME": "13243546576879_oauth",
                  "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
                  "STAGE_DB_USER": "wecari_db_public",
                  "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
                  "BASE_PATH_MAP": "oauth"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-095c9d58ddb37cca5"
                ],
                "SubnetIds": [
                  "subnet-6c499c20",
                  "subnet-a9880ed3",
                  "subnet-e453298d"
                ]
              },
              "Layers": [
                "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:14"
              ]
            },
            "DependsOn": [
              "TokenLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "TokenLambdaVersionV5Kglbs83kaa72JYsE61XAeOEqDZSga6FxI2VDgzk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TokenLambdaFunction"
              },
              "CodeSha256": "qDvmh8c9dOwopaC7ObFFdg7gSDpstzIB6IwhmEnphT4=",
              "Description": "Generate and verify oauth access tokens"
            }
          },
          "AuthorizeEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"warmer\":true}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "AuthorizeSchedule"
                }
              ]
            }
          },
          "AuthorizeLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "AuthorizeEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ResourcesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"warmer\":true}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ResourcesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "ResourcesSchedule"
                }
              ]
            }
          },
          "ResourcesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResourcesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ResourcesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "TokenEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"warmer\":true}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "TokenLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "TokenSchedule"
                }
              ]
            }
          },
          "TokenLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "TokenEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "Wecari-Oauth-dev",
              "BinaryMediaTypes": [
                "*/*"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceAuthorize": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "authorize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthorizeRequest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthorize"
              },
              "PathPart": "request",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResources": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "resources",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesGettokendata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "getTokenData",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesGetuserinfo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "getUserInfo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesFetchusers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "fetchUsers",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesRemoveaccess": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "removeAccess",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesCreateuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "createUser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesUpdateuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "updateUser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesCreateclient": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "createClient",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceToken": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "token",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTokenGet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceToken"
              },
              "PathPart": "get",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTokenVerify": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceToken"
              },
              "PathPart": "verify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthorizeRequestGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorizeRequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthorizeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthorizeRequestPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorizeRequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthorizeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesGettokendataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesGettokendata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesGetuserinfoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesGetuserinfo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesFetchusersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesFetchusers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesRemoveaccessPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesRemoveaccess"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesCreateuserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesCreateuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesUpdateuserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesUpdateuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodResourcesCreateclientPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesCreateclient"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourcesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTokenGetGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTokenGet"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TokenLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodTokenVerifyGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTokenVerify"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "TokenLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1578331585075": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAuthorizeRequestGet",
              "ApiGatewayMethodAuthorizeRequestPost",
              "ApiGatewayMethodResourcesGettokendataGet",
              "ApiGatewayMethodResourcesGetuserinfoGet",
              "ApiGatewayMethodResourcesFetchusersPost",
              "ApiGatewayMethodResourcesRemoveaccessPost",
              "ApiGatewayMethodResourcesCreateuserPost",
              "ApiGatewayMethodResourcesUpdateuserPost",
              "ApiGatewayMethodResourcesCreateclientPost",
              "ApiGatewayMethodTokenGetGet",
              "ApiGatewayMethodTokenVerifyGet"
            ]
          },
          "AuthorizeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ResourcesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResourcesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TokenLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TokenLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "AuthorizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizeLambdaVersionruF8cdm6uOqasbftoMKYKetnkTl0yvSAYp7B84S6Kg"
            }
          },
          "ResourcesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResourcesLambdaVersion6g9asmMRWUW1ODPPzD4RMPF9j7CSQmjj2R9oNcSoY"
            }
          },
          "TokenLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TokenLambdaVersionV5Kglbs83kaa72JYsE61XAeOEqDZSga6FxI2VDgzk"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "plugins": [
      "./vendor/bref/bref"
    ],
    "pluginsData": {},
    "functions": {
      "Authorize": {
        "handler": "index.php",
        "description": "Allow user to authorize access to their account",
        "memorySize": 128,
        "timeout": 28,
        "layers": [
          "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:14"
        ],
        "events": [
          {
            "http": "GET /authorize/request"
          },
          {
            "http": "POST /authorize/request"
          },
          {
            "schedule": {
              "rate": "rate(5 minutes)",
              "input": {
                "warmer": true
              }
            }
          }
        ],
        "name": "Oauth-dev-Authorize",
        "package": {},
        "memory": 128,
        "runtime": "provided",
        "vpc": {}
      },
      "Resources": {
        "handler": "index.php",
        "description": "Retrieve oauth resources e.g user details with client credentials and access token",
        "memorySize": 128,
        "timeout": 28,
        "layers": [
          "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:14"
        ],
        "events": [
          {
            "http": "GET /resources/getTokenData"
          },
          {
            "http": "GET /resources/getUserInfo"
          },
          {
            "http": "POST /resources/fetchUsers"
          },
          {
            "http": "POST /resources/removeAccess"
          },
          {
            "http": "POST /resources/createUser"
          },
          {
            "http": "POST /resources/updateUser"
          },
          {
            "http": "POST /resources/createClient"
          },
          {
            "schedule": {
              "rate": "rate(5 minutes)",
              "input": {
                "warmer": true
              }
            }
          }
        ],
        "name": "Oauth-dev-Resources",
        "package": {},
        "memory": 128,
        "runtime": "provided",
        "vpc": {}
      },
      "Token": {
        "handler": "index.php",
        "description": "Generate and verify oauth access tokens",
        "memorySize": 256,
        "timeout": 28,
        "layers": [
          "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:14"
        ],
        "events": [
          {
            "http": "GET /token/get"
          },
          {
            "http": "GET /token/verify"
          },
          {
            "schedule": {
              "rate": "rate(5 minutes)",
              "input": {
                "warmer": true
              }
            }
          }
        ],
        "name": "Oauth-dev-Token",
        "package": {},
        "memory": 256,
        "runtime": "provided",
        "vpc": {}
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "C:\\xampp\\htdocs\\wecari.com\\oauth\\.serverless\\Oauth.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/Oauth/dev/1578331593241-2020-01-06T17:26:33.241Z",
    "artifact": "Oauth.zip"
  }
}