{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AuthorizeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/Oauth-dev-Authorize"
      }
    },
    "ResourcesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/Oauth-dev-Resources"
      }
    },
    "TokenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/Oauth-dev-Token"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "Oauth",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Oauth-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Oauth-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "Oauth",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AuthorizeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/Oauth/dev/1583775436137-2020-03-09T17:37:16.137Z/Oauth.zip"
        },
        "FunctionName": "Oauth-dev-Authorize",
        "Handler": "index.php",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "provided",
        "Timeout": 28,
        "Description": "Allow user to authorize access to their account",
        "Environment": {
          "Variables": {
            "ENV": "dev",
            "BREF_BINARY_RESPONSES": 1,
            "DB_NAME": "13243546576879_oauth",
            "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
            "DB_USER": "wecari_db_public",
            "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
            "STAGE_DB_NAME": "13243546576879_oauth",
            "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
            "STAGE_DB_USER": "wecari_db_public",
            "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
            "AWS_SMTP_HOST": "email-smtp.us-east-1.amazonaws.com",
            "AWS_SMTP_PORT": "587",
            "AWS_SMTP_KEY": "AKIAZWJKRYM7P6ZMTNFC",
            "AWS_SMTP_SECRET": "BO3UTXCy16RB+vx+HSwy0c31GMhBiVlseRiS+7KLG0+B"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-eaba578b"
          ],
          "SubnetIds": [
            "subnet-6c499c20",
            "subnet-a9880ed3",
            "subnet-e453298d"
          ]
        },
        "Layers": [
          "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:15"
        ]
      },
      "DependsOn": [
        "AuthorizeLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "AuthorizeLambdaVersionrZrPPHxCPQSlWiSfRvSwLpIrGUSsvp6WmmcMkd206Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizeLambdaFunction"
        },
        "CodeSha256": "a+QAVL9g0CTrLKw+ZQBc9x9E7djdOl/rT/Gh3A7hHMg=",
        "Description": "Allow user to authorize access to their account"
      }
    },
    "ResourcesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/Oauth/dev/1583775436137-2020-03-09T17:37:16.137Z/Oauth.zip"
        },
        "FunctionName": "Oauth-dev-Resources",
        "Handler": "index.php",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "provided",
        "Timeout": 28,
        "Description": "Retrieve oauth resources e.g user details with client credentials and access token",
        "Environment": {
          "Variables": {
            "ENV": "dev",
            "BREF_BINARY_RESPONSES": 1,
            "DB_NAME": "13243546576879_oauth",
            "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
            "DB_USER": "wecari_db_public",
            "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
            "STAGE_DB_NAME": "13243546576879_oauth",
            "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
            "STAGE_DB_USER": "wecari_db_public",
            "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
            "AWS_SMTP_HOST": "email-smtp.us-east-1.amazonaws.com",
            "AWS_SMTP_PORT": "587",
            "AWS_SMTP_KEY": "AKIAZWJKRYM7P6ZMTNFC",
            "AWS_SMTP_SECRET": "BO3UTXCy16RB+vx+HSwy0c31GMhBiVlseRiS+7KLG0+B"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-eaba578b"
          ],
          "SubnetIds": [
            "subnet-6c499c20",
            "subnet-a9880ed3",
            "subnet-e453298d"
          ]
        },
        "Layers": [
          "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:15"
        ]
      },
      "DependsOn": [
        "ResourcesLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ResourcesLambdaVersionLUegBUFbHZ3g3uuDHEwZgRq5wmddRXPd3x2YOOVSeM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ResourcesLambdaFunction"
        },
        "CodeSha256": "a+QAVL9g0CTrLKw+ZQBc9x9E7djdOl/rT/Gh3A7hHMg=",
        "Description": "Retrieve oauth resources e.g user details with client credentials and access token"
      }
    },
    "TokenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/Oauth/dev/1583775436137-2020-03-09T17:37:16.137Z/Oauth.zip"
        },
        "FunctionName": "Oauth-dev-Token",
        "Handler": "index.php",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "provided",
        "Timeout": 28,
        "Description": "Generate and verify oauth access tokens",
        "Environment": {
          "Variables": {
            "ENV": "dev",
            "BREF_BINARY_RESPONSES": 1,
            "DB_NAME": "13243546576879_oauth",
            "DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
            "DB_USER": "wecari_db_public",
            "DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
            "STAGE_DB_NAME": "13243546576879_oauth",
            "STAGE_DB_HOST": "wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com",
            "STAGE_DB_USER": "wecari_db_public",
            "STAGE_DB_PASS": "h7FHr6x75egTQM65tvEEwTTSey82uwR7",
            "AWS_SMTP_HOST": "email-smtp.us-east-1.amazonaws.com",
            "AWS_SMTP_PORT": "587",
            "AWS_SMTP_KEY": "AKIAZWJKRYM7P6ZMTNFC",
            "AWS_SMTP_SECRET": "BO3UTXCy16RB+vx+HSwy0c31GMhBiVlseRiS+7KLG0+B"
          }
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-eaba578b"
          ],
          "SubnetIds": [
            "subnet-6c499c20",
            "subnet-a9880ed3",
            "subnet-e453298d"
          ]
        },
        "Layers": [
          "arn:aws:lambda:eu-west-2:209497400698:layer:php-73-fpm:15"
        ]
      },
      "DependsOn": [
        "TokenLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "TokenLambdaVersionHgJVLIE2m3ILkEEX8iAVFUwJEieptIL6xD1Mk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TokenLambdaFunction"
        },
        "CodeSha256": "a+QAVL9g0CTrLKw+ZQBc9x9E7djdOl/rT/Gh3A7hHMg=",
        "Description": "Generate and verify oauth access tokens"
      }
    },
    "AuthorizeEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(10 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Input": "{\"warmer\":true}",
            "Arn": {
              "Fn::GetAtt": [
                "AuthorizeLambdaFunction",
                "Arn"
              ]
            },
            "Id": "AuthorizeSchedule"
          }
        ]
      }
    },
    "AuthorizeLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AuthorizeEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ResourcesEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(10 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Input": "{\"warmer\":true}",
            "Arn": {
              "Fn::GetAtt": [
                "ResourcesLambdaFunction",
                "Arn"
              ]
            },
            "Id": "ResourcesSchedule"
          }
        ]
      }
    },
    "ResourcesLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ResourcesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ResourcesEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "TokenEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(10 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Input": "{\"warmer\":true}",
            "Arn": {
              "Fn::GetAtt": [
                "TokenLambdaFunction",
                "Arn"
              ]
            },
            "Id": "TokenSchedule"
          }
        ]
      }
    },
    "TokenLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "TokenEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Wecari-Oauth-dev",
        "BinaryMediaTypes": [
          "*/*"
        ],
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAuthorize": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "authorize",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthorizeAnyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuthorize"
        },
        "PathPart": "{any+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceResources": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "resources",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceResourcesAnyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceResources"
        },
        "PathPart": "{any+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceToken": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "token",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTokenAnyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceToken"
        },
        "PathPart": "{any+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthorizeAnyVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Cache-Control": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,Access-Token,X-Requested-With,X-Api-Key,X-Access-Token,X-Amz-Date,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'",
                "method.response.header.Cache-Control": "'max-age=600, s-maxage=600, proxy-revalidate'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthorizeAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodResourcesAnyVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Cache-Control": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,Access-Token,X-Requested-With,X-Api-Key,X-Access-Token,X-Amz-Date,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'",
                "method.response.header.Cache-Control": "'max-age=600, s-maxage=600, proxy-revalidate'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceResourcesAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTokenAnyVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Cache-Control": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,Access-Token,X-Requested-With,X-Api-Key,X-Access-Token,X-Amz-Date,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'",
                "method.response.header.Cache-Control": "'max-age=600, s-maxage=600, proxy-revalidate'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTokenAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthorizeAnyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthorizeAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AuthorizeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodResourcesAnyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceResourcesAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ResourcesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTokenAnyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTokenAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TokenLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1583775431292": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAuthorizeAnyVarOptions",
        "ApiGatewayMethodResourcesAnyVarOptions",
        "ApiGatewayMethodTokenAnyVarOptions",
        "ApiGatewayMethodAuthorizeAnyVarAny",
        "ApiGatewayMethodResourcesAnyVarAny",
        "ApiGatewayMethodTokenAnyVarAny"
      ]
    },
    "AuthorizeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ResourcesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ResourcesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TokenLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "AuthorizeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizeLambdaVersionrZrPPHxCPQSlWiSfRvSwLpIrGUSsvp6WmmcMkd206Q"
      }
    },
    "ResourcesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ResourcesLambdaVersionLUegBUFbHZ3g3uuDHEwZgRq5wmddRXPd3x2YOOVSeM"
      }
    },
    "TokenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TokenLambdaVersionHgJVLIE2m3ILkEEX8iAVFUwJEieptIL6xD1Mk"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}