<?php
// Define start time
define('APP_START_TIME', floor(microtime(true) * 1000));
// Load packages
define('APP_BASE_PATH', dirname(__FILE__) . DIRECTORY_SEPARATOR);
require_once(boolval(getenv('SEPARATE_VENDOR')) ? '/tmp/vendor/autoload.php' : APP_BASE_PATH . 'vendor/autoload.php');

use App\Controllers\CLI\Client;
use App\Controllers\CLI\Org;
use App\Controllers\CLI\User;
use App\Exceptions\Reporter;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Busarm\PhpMini\App;
use Busarm\PhpMini\Config;
use Busarm\PhpMini\Enums\Env;
use Busarm\PhpMini\Router;

/**
 *  Composer Command
 */
$composerCommand = (new Command('run'))
    ->setDescription("Run composer scripts")
    ->addArgument('name', InputArgument::REQUIRED, "Composer script name")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        passthru(sprintf("composer run-script %s", $input->getArgument('name')));
        run('composer', [
            'run-script',
            $input->getArgument('name')
        ], $output);
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 *  DB Migration Command
 */
$migrationCommand = (new Command('migrate'))
    ->setDescription("Migrate database")
    ->addOption('fake', '', InputOption::VALUE_NONE, "Mark any migrations selected as run, but don't actually execute them")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        run('vendor/bin/phinx', [
            'migrate',
            '--configuration=database/phinx.php',
            $input->getOption('fake') ? '--fake' : null
        ], $output);
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 * DB Migration Rollback Command
 */
$rollbackCommand = (new Command('rollback'))
    ->setDescription("Rollback database")
    ->addOption('fake', '', InputOption::VALUE_NONE, "Mark any migrations selected as run, but don't actually execute them")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        run('vendor/bin/phinx', [
            'rollback',
            '--configuration=database/app/phinx.php',
            $input->getOption('fake') ? '--fake' : null
        ], $output);
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 *  Create Org Command
 */
$createOrg = (new Command('org:create'))
    ->setDescription("Create organization")
    ->addOption('name', '', InputOption::VALUE_REQUIRED, "Organization name")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        $app = createApp();
        $app->setRouter(Router::withController(Org::class, "create_org", [
            $input->getOption('name') ?? exit('`name` option is required')
        ]))->run();
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 *  Create Client Command
 */
$createClient = (new Command('client:create'))
    ->setDescription("Create Client")
    ->addOption('org', '', InputOption::VALUE_REQUIRED, "Organization id")
    ->addOption('name', '', InputOption::VALUE_REQUIRED, "Client name")
    ->addOption('redirect', '', InputOption::VALUE_OPTIONAL, "Client redirect urls (space sparated). e.g http://localhost:80 http://localhost:81")
    ->addOption('scopes', '', InputOption::VALUE_OPTIONAL, "Client scopes (space sparated). e.g system admin")
    ->addOption('grants', '', InputOption::VALUE_OPTIONAL, "Client grant types (space sparated). e.g password client_credential refresh_token authorization_code")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        $app = createApp();
        $app->setRouter(Router::withController(Client::class, "create_client", [
            $input->getOption('org') ?? exit('`org` option is required'),
            $input->getOption('name') ?? exit('`name` option is required'),
            $input->getOption('redirect'),
            $input->getOption('scopes'),
            $input->getOption('grants'),
        ]))->run();
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 *  Update Client Key Command
 */
$updateClientKey = (new Command('client:update:key'))
    ->setDescription("Update Client Key")
    ->addOption('client', '', InputOption::VALUE_REQUIRED, "Client id")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        $app = createApp();
        $app->setRouter(Router::withController(Client::class, "update_client_key", [
            $input->getOption('client') ?? exit('`client` option is required')
        ]))->run();
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 *  Create User Command
 */
$createUser = (new Command('user:create'))
    ->setDescription("Create User")
    ->addOption('name', '', InputOption::VALUE_REQUIRED, "User name")
    ->addOption('email', '', InputOption::VALUE_REQUIRED, "User email")
    ->addOption('password', '', InputOption::VALUE_OPTIONAL, "User password")
    ->addOption('dial', '', InputOption::VALUE_OPTIONAL, "User phone number dial code")
    ->addOption('phone', '', InputOption::VALUE_OPTIONAL, "User phone number")
    ->addOption('scopes', '', InputOption::VALUE_OPTIONAL, "User scopes (space sparated). e.g user admin email")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");
        $app = createApp();
        $app->setRouter(Router::withController(User::class, "create_user", [
            $input->getOption('name') ?? exit('`name` option is required'),
            $input->getOption('email') ?? exit('`email` option is required'),
            $input->getOption('password'),
            $input->getOption('dial'),
            $input->getOption('phone'),
            $input->getOption('scopes')
        ]))->run();
        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });

/**
 * Initialize console app
 */
$console = (new Application(getenv('APP_NAME') ?? 'PHP' . " Console App"));
$console->addCommands([
    $composerCommand,
    $migrationCommand,
    $rollbackCommand,
    $createOrg,
    $createClient,
    $updateClientKey,
    $createUser,
]);
$console->run();

/**
 * Create app instance
 *
 * @return App
 */
function createApp(): App
{
    // Get Application Environment
    if (env('ENV') == Env::PROD || strtolower(env('ENV')) == "prod" || strtolower(env('STAGE')) == "prod") {
        $env = Env::PROD;
    } else if (env('ENV') == Env::TEST || strtolower(env('ENV')) == "dev" || strtolower(env('STAGE')) == "dev") {
        $env = Env::TEST;
    } else {
        $env = Env::DEV;
    }

    // Iniitalize App
    $config = (new Config)
        ->setBasePath(APP_BASE_PATH)
        ->setAppPath('app')
        ->setConfigPath('Configs')
        ->setViewPath('Views');
    $app = new App($config, $env);
    // Add config files
    $app->loadConfig('app');
    $app->loadConfig('database');
    $app->loadConfig('mail');
    $app->loadConfig('services');
    $app->loadConfig('scopes');
    // Add error reporter
    $app->setErrorReporter(new Reporter);
    return $app;
}
