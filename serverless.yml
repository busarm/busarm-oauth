# TODO
# -------
# Decrease heatbeat rate to 10 minutes for production

service: Oauth

provider:
    name: aws
    runtime: provided
    region: ${opt:region, 'eu-west-2'} # e.g serverless delopy --region eu-west-2 (default = 'eu-west-2')
    stage: ${opt:stage, 'dev'} # e.g serverless delopy --stage dev (default = 'dev')
    stackName: Wecari-Oauth-${self:provider.stage}
    apiName: Wecari-Oauth-${self:provider.stage}
    environment: # define service wide environment variables here
        ENV: ${self:provider.stage} # Environment variable
        BREF_BINARY_RESPONSES: 1 # For bref to return binary responses. Bref will automatically encode responses to base64
        # AWS RDS - Production
        DB_NAME: 13243546576879_oauth
        DB_HOST: wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com
        DB_USER: wecari_db_public
        DB_PASS: h7FHr6x75egTQM65tvEEwTTSey82uwR7
        # AWS RDS - Staging
        STAGE_DB_NAME: 13243546576879_oauth
        STAGE_DB_HOST: wecari-prod.czxrcl7gwax1.eu-west-2.rds.amazonaws.com
        STAGE_DB_USER: wecari_db_public
        STAGE_DB_PASS: h7FHr6x75egTQM65tvEEwTTSey82uwR7
        # AWS SMTP
        AWS_SMTP_HOST: 'email-smtp.us-east-1.amazonaws.com'
        AWS_SMTP_PORT: '587'
        AWS_SMTP_KEY: AKIAZWJKRYM7P6ZMTNFC
        AWS_SMTP_SECRET: BO3UTXCy16RB+vx+HSwy0c31GMhBiVlseRiS+7KLG0+B
    apiGateway:
        binaryMediaTypes:
            - '*/*'
    vpc:
        securityGroupIds:
            - sg-eaba578b
        subnetIds:
            - subnet-6c499c20
            - subnet-a9880ed3
            - subnet-e453298d

plugins:
    - ./vendor/bref/bref

package:
    exclude:
        - composer.json 
        - composer.lock
        - .git/**
        - .serverless/**
        - .htaccess
       
custom:
  corsHeaders: 
    - Content-Type
    - Authorization
    - Access-Token
    - X-Requested-With
    - X-Api-Key
    - X-Access-Token
    - X-Amz-Date
    - X-Amz-User-Agent
    - X-Amz-User-Agent 
      
functions:
    Authorize:
        handler: index.php
        description: 'Allow user to authorize access to their account'
        memorySize: 256
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-73-fpm}
        events:
            - http:  
                path: '/authorize/{any+}'
                method: ANY
                cors:         
                    origin: '*'
                    headers: ${self:custom.corsHeaders} 
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' 
            - schedule:
                rate: rate(10 minutes)
                input:
                    warmer: true
    Resources:
        handler: index.php
        description: 'Retrieve oauth resources e.g user details with client credentials and access token'
        memorySize: 512
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-73-fpm}
        events:
            - http:  
                path: '/resources/{any+}'
                method: ANY
                cors:         
                    origin: '*'
                    headers: ${self:custom.corsHeaders} 
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' 
            - schedule:
                rate: rate(10 minutes)
                input:
                    warmer: true
    Token:
        handler: index.php
        description: 'Generate and verify oauth access tokens'
        memorySize: 512
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-73-fpm}
        events:
            - http:  
                path: '/token/{any+}'
                method: ANY
                cors:         
                    origin: '*'
                    headers: ${self:custom.corsHeaders} 
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' 
            - schedule:
                rate: rate(10 minutes)
                input:
                    warmer: true
