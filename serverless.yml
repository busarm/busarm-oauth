service: Wecari-Oauth

provider:
    name: aws
    runtime: provided.al2
    profile: wecari
    region: ${opt:region, ''}
    stage: ${opt:stage, ''}
    stackName: Wecari-Oauth-${self:provider.stage}
    apiName: Wecari-Oauth-${self:provider.stage}
    role: ${self:custom.roleName}
    logRetentionInDays: ${self:custom.logRetentionInDays}
    deploymentMethod: direct
    environment: # define service wide environment variables here
        ENV: ${self:provider.stage} # Environment variable
        BREF_BINARY_RESPONSES: "1" # For bref to return binary responses. Bref will automatically encode responses to base64
        SEPARATE_VENDOR: "0"
        # App
        APP_VERSION: ${git:describe}
        APP_NAME: "Wecari Oauth"
        APP_THEME_PRIMARY_COLOR: '#3f5f44'
        APP_THEME_SECONDARY_COLOR: '#f1da8e'
        COMPANY_NAME: "Wecari"
        ENCRYPTION_KEY: ${self:custom.secret.${self:provider.stage}.oauth_encryption_key}
        BUGSNAG_KEY: ${self:custom.secret.${self:provider.stage}.oauth_bugsnag_key}
        EMAIL_INFO: "info@wecari.com"
        EMAIL_SUPPORT: "support@wecari.com"
        SYSTEM_SHUT_DOWN_TIME: ${self:custom.stopTime.${self:provider.stage}}
        SYSTEM_START_UP_TIME: ${self:custom.startTime.${self:provider.stage}}
        MAINTENANCE_MODE: "0"
        API_URL: ${self:custom.apiUrl.${self:provider.stage}}
        APP_URL: ${self:custom.appUrl.${self:provider.stage}}
        ASSET_URL: ${self:custom.assetUrl.${self:provider.stage}}
        PARTNER_URL: ${self:custom.partnerUrl.${self:provider.stage}}
        # Databse
        DB_NAME: 13243546576879_oauth
        DB_HOST: ${self:custom.secret.${self:provider.stage}.db_host}
        DB_PORT: ${self:custom.secret.${self:provider.stage}.db_port}
        DB_USER: ${self:custom.secret.${self:provider.stage}.db_username}
        DB_PASS: ${self:custom.secret.${self:provider.stage}.db_password}
        # SMTP
        SMTP_HOST: ${self:custom.secret.${self:provider.stage}.smtp_host}
        SMTP_PORT: ${self:custom.secret.${self:provider.stage}.smtp_port}
        SMTP_KEY: ${self:custom.secret.${self:provider.stage}.smtp_username}
        SMTP_SECRET: ${self:custom.secret.${self:provider.stage}.smtp_password}
        # Google
        RECAPTCHA_SECRET_KEY: ${self:custom.secret.${self:provider.stage}.recaptcha_secret_key}
        RECAPTCHA_CLIENT_KEY: ${self:custom.secret.${self:provider.stage}.recaptcha_client_key}
    apiGateway:
        binaryMediaTypes:
            - "*/*"
    vpc:
        securityGroupIds:
            - sg-0f8d9dd9d6c8486db
        subnetIds:
            - subnet-00c055bcb994cd571
            - subnet-0effe477213b0ed11

plugins:
  - ./vendor/bref/bref
  - serverless-plugin-log-retention
  - serverless-plugin-git-variables
  - serverless-plugin-canary-deployments
  - serverless-prune-plugin
package:
    exclude:
        - composer.json
        - composer.lock
        - .git/**
        - .vscode/**
        - .serverless/**
        - .uploads/**
        - .cache/**
        - .logs/**
        - .htaccess
        - node_modules/**

custom:
    bref:
        separateVendor: 0
    maxMem:
        Dev: 2048
        Prod: 4096
    superMem:
        Dev: 1024
        Prod: 2048
    highMem:
        Dev: 512
        Prod: 1024
    avgMem:
        Dev: 256
        Prod: 512
    lowMem:
        Dev: 128
        Prod: 256
    logRetentionInDays: 30
    secret:
        Dev: ${ssm:/aws/reference/secretsmanager/dev/wecari}
        Prod: ${ssm:/aws/reference/secretsmanager/prod/wecari}
    roleName: WecariOauthLambdaRole
    corsHeaders:
        - Content-Type
        - Authorization
        - Access-Token
        - X-Requested-With
        - X-Api-Key
        - X-Access-Token
        - X-Amz-Date
        - X-Amz-User-Agent
    corsCache: "max-age=3600"
    startTime:
        Dev: "08:00"
        Prod: ""
    stopTime:
        Dev: "22:00"
        Prod: ""
    # Git vars to show in ENV
    gitVariablesEnvWhitelist:
        [
            "GIT_COMMIT_SHORT",
            "GIT_COMMIT_LONG",
            "GIT_BRANCH",
            "GIT_IS_DIRTY",
            "GIT_REPOSITORY",
            "GIT_TAGS",
        ]
    # Git vars to show in AWS Tags
    gitVariablesTagsWhitelist:
        [
            "GIT_COMMIT_SHORT",
            "GIT_COMMIT_LONG",
            "GIT_BRANCH",
            "GIT_IS_DIRTY",
            "GIT_REPOSITORY",
        ]
    # Trafic shifting Deployment
    deploymentSettings:
        stages:
            - Prod # Only use blue/green deployment for production
    # Previous version prunning
    prune:
        automatic: true
        includeLayers: true
        number: 3 # Max versions allowed
    # Urls
    apiUrl:
        Dev: "https://api.staging.wecari.com"
        Prod: "https://api.wecari.com"
    appUrl:
        Dev: "https://staging.wecari.com"
        Prod: "https://wecari.com"
    assetUrl:
        Dev: "https://cdn.staging.wecari.com"
        Prod: "https://cdn.wecari.com"
    partnerUrl:
        Dev: "https://partner.staging.wecari.com"
        Prod: "https://partner.wecari.com"

functions:
    # Console
    Console:
        handler: console
        description: "Wecari Console & Cron Job Scheduler"
        memorySize: ${self:custom.avgMem.${self:provider.stage}}
        timeout: 28
        layers:
            - ${bref:layer.php-80}
            - ${bref:layer.console} # Console layer
        package:
            exclude:
                - "public/**"
        deploymentSettings:
            type: AllAtOnce
            alias: Live

    Authorize:
        handler: "public/index.php"
        description: "Allow user to authorize access to their account"
        memorySize: ${self:custom.avgMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:
                  path: "/authorize/{any+}"
                  method: ANY
                  cors:
                      origin: "*"
                      headers: ${self:custom.corsHeaders}
                      allowCredentials: false
                      cacheControl: ${self:custom.corsCache}
        deploymentSettings:
            type: AllAtOnce
            alias: Live

    Resources:
        handler: "public/index.php"
        description: "Retrieve oauth resources e.g user details with client credentials and access token"
        memorySize: ${self:custom.highMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:
                  path: "/resources/{any+}"
                  method: ANY
                  cors:
                      origin: "*"
                      headers: ${self:custom.corsHeaders}
                      allowCredentials: false
                      cacheControl: ${self:custom.corsCache}
            - schedule:
                  rate: rate(5 minutes)
                  input:
                      warmer: true
        deploymentSettings:
            type: AllAtOnce
            alias: Live

    Token:
        handler: "public/index.php"
        description: "Generate and manage oauth access tokens"
        memorySize: ${self:custom.highMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:
                  path: "/token/{any+}"
                  method: ANY
                  cors:
                      origin: "*"
                      headers: ${self:custom.corsHeaders}
                      allowCredentials: false
                      cacheControl: ${self:custom.corsCache}
            - schedule:
                  rate: rate(5 minutes)
                  input:
                      warmer: true
        deploymentSettings:
            type: AllAtOnce
            alias: Live
    Misc:
        handler: "public/index.php"
        description: "Perform Miscellaneous tasks"
        memorySize: ${self:custom.avgMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:
                  path: "/misc/{any+}"
                  method: ANY
                  cors:
                      origin: "*"
                      headers: ${self:custom.corsHeaders}
                      allowCredentials: false
                      cacheControl: ${self:custom.corsCache}
        deploymentSettings:
            type: AllAtOnce
            alias: Live

resources:
    Resources:
        WecariOauthLambdaRole:
            Type: AWS::IAM::Role
            Properties:
                RoleName: WecariOauthLambdaRole${self:provider.stage}-${self:provider.region}
                Path: /
                AssumeRolePolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                        - Effect: Allow
                          Principal:
                              Service:
                                  - lambda.amazonaws.com
                          Action: sts:AssumeRole
                Policies:
                    - PolicyName: WecariOauthLambdaPolicy${self:provider.stage}
                      PolicyDocument:
                          Version: "2012-10-17"
                          Statement:
                              - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                    - ec2:CreateNetworkInterface
                                    - ec2:DeleteNetworkInterface
                                    - ec2:DescribeNetworkInterfaces
                                    - ec2:DescribeSecurityGroups
                                    - ec2:DescribeSubnets
                                    - ec2:DescribeVpcs
                                Resource: "*"

    Outputs:
        RoleName:
            Value: ${self:custom.roleName}
            Description: Name of the created Amazon Role.
