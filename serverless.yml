# TODO
# -------
# Decrease heatbeat rate to 10 minutes for production

service: Wecari-Oauth

provider:
    name: aws
    runtime: provided.al2
    profile: wecari
    region: ${opt:region, 'eu-west-2'} # e.g serverless delopy --region eu-west-2 (default = 'eu-west-2')
    stage: ${opt:stage, 'Dev'} # e.g serverless delopy --stage dev (default = 'dev')
    stackName: Wecari-Oauth-${self:provider.stage}
    apiName: Wecari-Oauth-${self:provider.stage}
    role: ${self:custom.roleName}
    environment: # define service wide environment variables here
        ENV: ${self:provider.stage} # Environment variable
        BREF_BINARY_RESPONSES: '1' # For bref to return binary responses. Bref will automatically encode responses to base64
        # Data and Session encryption key
        ENCRYPTION_KEY: ${self:custom.secret.oauth_encryption_key} 
        # Data
        BUGSNAG_KEY: ${self:custom.secret.oauth_bugsnag_key} 
        # AWS RDS - Production
        DB_NAME: 13243546576879_oauth
        DB_HOST: ${self:custom.secret.db_host}
        DB_PORT: ${self:custom.secret.db_port}
        DB_USER: ${self:custom.secret.db_username}
        DB_PASS: ${self:custom.secret.db_password}
        # AWS RDS - Staging
        STAGE_DB_HOST: ${self:custom.secret.db_host}
        STAGE_DB_PORT: ${self:custom.secret.db_port}
        STAGE_DB_USER: ${self:custom.secret.db_username}
        STAGE_DB_PASS: ${self:custom.secret.db_password}
        # AWS SMTP
        AWS_SMTP_HOST: ${self:custom.secret.smtp_host}
        AWS_SMTP_PORT: ${self:custom.secret.smtp_port}
        AWS_SMTP_KEY: ${self:custom.secret.smtp_username}
        AWS_SMTP_SECRET: ${self:custom.secret.smtp_password}
        # Google
        RECAPTCHA_SECRET_KEY: ${self:custom.secret.recaptcha_secret_key}
        RECAPTCHA_CLIENT_KEY: ${self:custom.secret.recaptcha_client_key}
    apiGateway:
        binaryMediaTypes:
            - '*/*'
    vpc:
        securityGroupIds:
            - sg-eaba578b
        subnetIds:
            - subnet-6c499c20
            - subnet-a9880ed3
            - subnet-e453298d

plugins:
  - ./vendor/bref/bref
  - serverless-plugin-log-retention
package:
    exclude:
        - composer.json 
        - composer.lock
        - .git/**
        - .serverless/**
        - .htaccess
        - node_modules/**
       
functions:
    Authorize:
        handler: index.php
        description: 'Allow user to authorize access to their account'
        memorySize: ${self:custom.avgMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        logRetentionInDays: ${self:custom.logRetentionInDays} 
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:  
                path: '/authorize/{any+}'
                method: ANY
                cors:         
                    origin: '*'
                    headers: ${self:custom.corsHeaders} 
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' 
                    
    Resources:
        handler: index.php
        description: 'Retrieve oauth resources e.g user details with client credentials and access token'
        memorySize: ${self:custom.avgMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        logRetentionInDays: ${self:custom.logRetentionInDays} 
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:  
                path: '/resources/{any+}'
                method: ANY
                cors:         
                    origin: '*'
                    headers: ${self:custom.corsHeaders} 
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' 
            - schedule:
                rate: rate(5 minutes)
                input:
                    warmer: true
                    
    Token:
        handler: index.php
        description: 'Generate and verify oauth access tokens'
        memorySize: ${self:custom.highMem.${self:provider.stage}}
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        logRetentionInDays: ${self:custom.logRetentionInDays} 
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            - http:  
                path: '/token/{any+}'
                method: ANY
                cors:         
                    origin: '*'
                    headers: ${self:custom.corsHeaders} 
                    allowCredentials: false
                    cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate' 
            - schedule:
                rate: rate(5 minutes)
                input:
                    warmer: true

custom:
    highMem:
        Dev: 512
        Prod: 1024
    avgMem:
        Dev: 256
        Prod: 512
    lowMem:
        Dev: 128
        Prod: 256
    logRetentionInDays: 30
    secret: ${ssm:/aws/reference/secretsmanager/prod/wecari~true}
    roleName: WecariOauthLambdaRole
    corsHeaders: 
      - Content-Type
      - Authorization
      - Access-Token
      - X-Requested-With
      - X-Api-Key
      - X-Access-Token
      - X-Amz-Date
      - X-Amz-User-Agent
      
 
resources:
  Resources:  
    WecariOauthLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WecariOauthLambdaRole${self:provider.stage}-${self:provider.region}
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: WecariOauthLambdaPolicy${self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - ec2:CreateNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DescribeSecurityGroups
                    - ec2:DescribeSubnets
                    - ec2:DescribeVpcs
                  Resource: "*" 
        
  Outputs:
    RoleName:
      Value: ${self:custom.roleName}
      Description: Name of the created Amazon Role.