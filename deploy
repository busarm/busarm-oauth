<?php
require_once(boolval(getenv('SEPARATE_VENDOR')) ? '/tmp/vendor/autoload.php' : 'vendor/autoload.php');
require_once('bootstrap/constants.php');

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;

/**
 *  Deploymment serverless
 */
$serverlessDeployment = (new Command('sls'))
    ->setDescription("Handle serverless deployments")
    ->addOption('--dev', '', InputOption::VALUE_NONE, "Deployment to Development/staging environment. Permitted branches: " . implode(' ', BRANCHES_DEV))
    ->addOption('--prod', '', InputOption::VALUE_NONE, "Deployment to Production environment. Permitted branches: " . implode(' ', BRANCHES_PROD))
    ->addOption('--all', '', InputOption::VALUE_NONE, "Deployment to both Development & Production environments. Permitted branches: " . implode(' ', BRANCHES_PROD))
    ->addOption('--force', '', InputOption::VALUE_NONE, "Force deployment")
    ->addOption('--conceal', '-c', InputOption::VALUE_NONE, "Hide secrets from the output (e.g. API Gateway key values)")
    ->addOption('--function', '-f', InputOption::VALUE_NONE, "Function name. Deploys a single function")
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $output->writeln("<info>Started: " . date('Y-m-d h:i:s') . "</info>");

        // Get current branch name
        $branch = branchName();

        // Check commit status
        if (!checkCommit()) {
            throw (new Exception('Please commit files to git before deploying'));
        }

        // Deploy to all - ensure that branch is production
        if (!empty($input->getOption('all')) && (isBranchMatchOrThrow($branch, BRANCHES_PROD))) {
            deploySLS(
                STAGE_DEV,
                REGION_DEV,
                $input->getOption('function'),
                $input->getOption('conceal'),
                $input->getOption('force'),
                $input->getOption('verbose')
            );
            deploySLS(
                STAGE_PROD,
                REGION_PROD,
                $input->getOption('function'),
                $input->getOption('conceal'),
                $input->getOption('force'),
                $input->getOption('verbose')
            );
        }
        // Deploy to prod - ensure that branch is production
        else if (!empty($input->getOption('prod')) && (isBranchMatchOrThrow($branch, BRANCHES_PROD))) {
            deploySLS(
                STAGE_PROD,
                REGION_PROD,
                $input->getOption('function'),
                $input->getOption('conceal'),
                $input->getOption('force'),
                $input->getOption('verbose')
            );
        }
        // Deploy to dev - ensure branch is staging or development
        else if (!empty($input->getOption('dev')) && (isBranchMatchOrThrow($branch, BRANCHES_DEV))) {
            deploySLS(
                STAGE_DEV,
                REGION_DEV,
                $input->getOption('function'),
                $input->getOption('conceal'),
                $input->getOption('force'),
                $input->getOption('verbose')
            );
        } else {
            throw (new Exception('Invalid environment selected. Use option: `--dev`, `--prod` or `--all`,'));
        }

        $output->writeln("<info>Done: " . date('Y-m-d h:i:s') . "</info>");
    });


/**
 * Initialize console app
 */
$app = (new Application(getenv('APP_NAME') ?? 'PHP' . " Console App"));
$app->addCommands([
    $serverlessDeployment,
]);
$app->run();


/**
 * Process serverless deployment
 *
 * @param string $stage
 * @param string $region
 * @param string $function
 * @param boolean $conceal
 * @param boolean $force
 * @param boolean $verbose
 * @return void
 */
function deploySLS($stage = STAGE_DEV, $region = REGION_DEV, $function = '', $conceal = false, $force = false, $verbose = false)
{
    $args = [];
    if ($conceal) {
        $args[] = '--conceal';
    }
    if ($force) {
        $args[] = '--force';
    }
    if ($verbose) {
        $args[] = '--verbose';
    }
    $output = new ConsoleOutput(ConsoleOutput::VERBOSITY_DEBUG, true, new OutputFormatter(true));
    if (run('git', ['push'], $output)->isSuccessful()) {
        run('sls', [
            'deploy',
            '--stage=' . $stage,
            '--region=' . $region,
            '--verbose',
            ...$args,
            $function
        ], $output, true, 900);
    }
}


/**
 * Check if files have been committed to git
 *
 * @return boolean
 */
function checkCommit()
{
    return empty(trim(shell_exec('git diff --quiet || echo dirty')));
}

/**
 * Get branch name
 *
 * @return string
 */
function branchName()
{
    return trim(shell_exec('git rev-parse --abbrev-ref HEAD'));
}

/**
 * Check if branch matches
 *
 * @param string $name Branch name
 * @param array $list Branch list to match against
 * @return boolean
 */
function isBranchMatchOrThrow($name, $list)
{
    foreach ($list as $branch) {
        if (!empty($branch) && stripos($branch, '*') !== false && stripos($name, str_replace('*', '', $branch)) !== false) {
            return true;
        } else if (!empty($branch) && $branch == $name) {
            return true;
        }
    }
    throw (new Exception('Invalid branch. Deployment to this environment can only be performed from the following branches: ' . implode(' ', $list)));
}
